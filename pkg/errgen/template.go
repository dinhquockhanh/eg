package errgen

import (
	"fmt"
	"text/template"
)

const errorsTmpl = `// Code generated by go tool eg; DO NOT EDIT.

package {{.PackageName}}

import (
	"errors"
)

type Error struct {
	Status  int
	Code    int    {{jsonTag "code"}}
	Message string {{jsonTag "message"}}
}

var (
{{- range $k, $v := .Errors}}
	{{$k}} = &Error{
		Code:    {{$v.Code}},
		Status:  {{$v.Status}},
		Message: "{{$v.Message}}",
	}
{{- end}}
)

// Is a wrapper of built-in errors.Is
func Is(err, target error) bool {
	return errors.Is(err, target)
}

// As a wrapper of built-in errors.As
func As(err error, target any) bool {
	return errors.As(err, target)
}

`

var errorsTemplate = template.Must(template.New("errors").Funcs(template.FuncMap{
	"jsonTag": func(s string) string {
		return fmt.Sprintf("`json:\"%s\"`", s)
	},
}).Parse(errorsTmpl))
